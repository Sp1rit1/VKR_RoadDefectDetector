# RoadDefectDetector/src/configs/detector_config_single_level_debug.yaml

# --- Параметры для ОДНОУРОВНЕВОЙ (P4) модели детектора для ПОЛНОЦЕННОГО ОБУЧЕНИЯ ---
# Цель: Обучить простую одноуровневую модель на всем датасете и получить метрики.

fpn_detector_params: # Название секции оставляем для совместимости с тем, как модули читают конфиг
  model_name_prefix: "RoadDefectDetector_SingleLevel_P4_FullTrain" # Новое имя для этого запуска
  backbone_name: "MobileNetV2"
  input_shape: [416, 416, 3]
  classes: ["pit", "crack"]
  num_classes: 2

  # --- Параметры для ОДНОГО УРОВНЯ (P4_debug) ---
  detector_fpn_levels: ['P4_debug'] # Наш единственный уровень
  detector_fpn_strides:
    P4_debug: 16 # Страйд для выхода MobileNetV2 'block_13_expand_relu'

  fpn_gt_assignment_scale_ranges: # Для одного уровня этот параметр не так критичен,
                                  # так как все объекты будут пытаться назначиться на него.
    P4_debug: [0, 100000]       # Оставляем широкий диапазон.

  detector_fpn_anchor_configs:
    P4_debug:
      num_anchors_this_level: 7 # <<< Используем K-Means якоря, рассчитанные для P4 из основного конфига.
                                # Это даст модели лучшие шансы, чем один дефолтный якорь.
      anchors_wh_normalized: # Твои K-Means якоря для P4
        - [0.1832, 0.1104]
        - [0.0967, 0.2753]
        - [0.4083, 0.0925]
        - [0.0921, 0.4968]
        - [0.2919, 0.1936]
        - [0.7358, 0.0843]
        - [0.0743, 0.8969]

  head_config:
    fpn_filters: 256 # Не используется
    head_depth: 2
    head_conv_filters: 256 # <<< Увеличим фильтры для "головы"
    leaky_relu_alpha: 0.1
    l2_regularization: 0.00001 # <<< Добавим небольшую L2 регуляризацию

# --- Параметры Обучения для Полноценного Запуска Одноуровневой Модели ---
unfreeze_backbone: false # Backbone ЗАМОРОЖЕН (обучаем только голову)

batch_size: 8            # <<< Попробуем 8 (или 4, если OOM)
epochs_for_debug: 150    # <<< Количество эпох для обучения (EarlyStopping проконтролирует)
                         # Переименовал из epochs в detector_config.yaml, чтобы не путать с epochs_for_debug,
                         # который мы использовали для одного изображения.
                         # Либо ты можешь использовать один параметр 'epochs' и менять его значение.
initial_learning_rate: 0.0001 # <<< Начальный LR (1e-4)

use_augmentation: true   # <<< ВКЛЮЧАЕМ АУГМЕНТАЦИЮ

# Параметры Callbacks (эти значения будут использоваться train_detector_single_level_debug.py)
early_stopping_patience: 20
reduce_lr_patience: 7
reduce_lr_factor: 0.2
min_lr_on_plateau: 0.0000005 # (5e-8)

# --- Параметры Функции Потерь ---
loss_weights:
  coordinates: 1.0
  objectness: 2.0       # Умеренный акцент на objectness
  no_object: 0.7        # Умеренный штраф за фон
  classification: 1.5   # Акцент на классификацию

focal_loss_objectness_params:
  use_focal_loss: true  # <<< ПОПРОБУЕМ ВКЛЮЧИТЬ Focal Loss для objectness
  alpha: 0.25
  gamma: 2.0

# --- Параметры для Инференса (используются в evaluate_detector_single_level_debug.py) ---
predict_params:
  confidence_threshold: 0.25 # Начальное значение, подберем после обучения
  iou_threshold: 0.45        # Начальное значение, подберем после обучения
  max_detections: 100