# ===================================================================
#      Конфигурация для Детектора v3 - "Чистый Лист"
#      Подход: RetinaNet-like (Scales + Ratios)
# ===================================================================

# --- Основные параметры модели и датасета ---
model_name: "DetectorV3_RetinaNet"
description: "Standard object detector with EfficientNetB0, FPN, and standard RetinaNet-like heads (Scales+Ratios anchors)."

dataset_path: "data/Detector_Dataset_Ready"
train_images_subdir: "train/images"
train_annotations_subdir: "train/Annotations"
val_images_subdir: "validation/images"
val_annotations_subdir: "validation/Annotations"

input_shape: [512, 512, 3]
image_normalization_method: "imagenet"

num_classes: 2
class_names: ["pit", "crack"]

# --- Параметры якорей (Anchors) ---
# Используем стандартный подход RetinaNet: якоря генерируются из комбинаций scales и ratios.
# Этот подход более надежный, робастный и простой в реализации, чем K-Means.

anchor_ratios:
- 0.126  # Вертикальная трещина
- 0.362  # Умеренно-вертикальная
- 1.136  # Квадратная/Яма (чуть вытянутая)
- 2.461  # Умеренно-горизонтальная
- 6.093  # Горизонтальная трещина

# Масштабы якорей. Это множители к базовому размеру якоря на каждом уровне.
# Базовый размер = stride * anchor_base_size. Стандартно anchor_base_size = 4.
# На уровне P3 (stride=8), базовый размер ~32px. Якоря будут размерами ~{32, 40, 51}px.
# На уровне P4 (stride=16), базовый размер ~64px. Якоря будут размерами ~{64, 80, 102}px и т.д.
anchor_scales: [1.0, 1.2599, 1.5874] # Соответствует 2^(0), 2^(1/3), 2^(2/3)

# Количество якорей в каждой ячейке сетки для каждого уровня FPN.
# Рассчитывается как len(anchor_scales) * len(anchor_ratios).
# 3 scales * 3 ratios = 9. Это значение должно быть одинаковым для всех уровней.
num_anchors_per_level: 15

fpn_filters: 256

# --- Параметры назначения GT (Ground Truth Assignment) ---
# Диапазоны для назначения GT объектов на каждый уровень FPN.
# Используем стандартный подход RetinaNet, основанный на МАКСИМАЛЬНОЙ СТОРОНЕ GT бокса в пикселях.
# Это более робастно и логично, чем площадь, т.к. напрямую связано со stride уровня.
# P3 (stride 8): для объектов со стороной от 0 до 64px
# P4 (stride 16): для объектов со стороной от 64 до 128px
# P5 (stride 32): для объектов со стороной от 128px и больше
fpn_gt_assignment_side_ranges:
  P3: [0, 64]
  P4: [64, 128]
  P5: [128, 99999] # Используем большое число вместо float('inf') для совместимости с YAML

# Пороги IoU для назначения якорей к GT.
# Используем стандартные значения для RetinaNet.
anchor_positive_iou_threshold: 0.5 # IoU >= 0.5 -> позитивный якорь
anchor_ignore_iou_threshold: 0.4   # 0.4 <= IoU < 0.5 -> игнорируемый якорь
# Якоря с IoU < 0.4 считаются негативными (фоном).
# Гарантированное назначение (если у GT нет позитивных якорей) будет реализовано в data_loader.

# --- Параметры функции потерь ---
loss_weights:
  classification: 1.0
  box_regression: 1.5 # Для начала поставим 1.0, чтобы сбалансировать потери. Можно будет поднять до 1.5 позже.

focal_loss_alpha: 0.25
focal_loss_gamma: 1.25

box_loss_type: "ciou"
huber_loss_delta: 1.0

# --- Параметры обучения ---
optimizer: "AdamW"
initial_learning_rate: 0.0001 # Для AdamW и обучения с нуля (замороженный backbone) можно начать с 1e-3
fine_tune_learning_rate: 0.00001 # LR для размороженного backbone

lr_schedule: "cosine_decay"
warmup_epochs: 1 #3
# cosine_decay_epochs будет равно общему числу эпох обучения на каждой фазе.


epochs_phase1: 1 #100
epochs_phase2: 1 #50

early_stopping_patience: 20       # Сколько эпох ждать без улучшения val_loss
early_stopping_min_delta: 0.0001  # Минимальное изменение, которое считается улучшением


batch_size: 8
use_augmentation: true

# --- Пути для логов и весов ---
log_dir: "logs/detector_v3_retinanet"
saved_model_dir: "weights/detector_v3_retinanet"
best_model_filename: "best_model.keras"

# --- Параметры оценки и инференса ---
eval_conf_threshold: 0.3
eval_iou_threshold: 0.45

predict_conf_threshold: 0.3
predict_iou_threshold: 0.45

# Старый подход с K-Means

anchor_calc_k_range: [3, 4, 5, 6, 7, 8, 9] # Пример: анализ от 3 до 9 якорей

# Папка для сохранения графиков анализа якорей (относительно корня проекта)
anchor_analysis_output_dir: "graphs/anchor_analysis"

fpn_gt_assignment_area_ranges:
  - [0.0, 0.01]      # Объекты с норм. площадью < 0.01 -> P3 (stride 8). Начнем с такого порога.
  - [0.01, 0.1]      # Объекты с 0.01 <= норм. площадь < 0.1 -> P4 (stride 16). Начнем с такого порога.
  - [0.1, 1.0]       # Объекты с норм. площадью >= 0.1 -> P5 (stride 32). До 1.0

num_anchors_per_level_K_means:
  P3: 18 # Если K=6 scales * 3 ratios = 18
  P4: 24 # Если K=8 scales * 3 ratios = 24
  P5: 24 # Если K=8 scales * 3 ratios = 24

